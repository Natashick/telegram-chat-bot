#!/usr/bin/env python3
"""
SIMPLE TELEGRAM BOT
Zweck: Einfacher Bot ohne Railway - l√§uft √ºberall
"""

import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import requests

# LOGGING SETUP
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# TELEGRAM TOKEN
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    print("‚ùå TELEGRAM_TOKEN nicht gesetzt!")
    print("Setze TELEGRAM_TOKEN=dein_token")
    exit(1)

# ALLOWED USER ID (nur du kannst PDFs hochladen)
ALLOWED_USER_ID = 589793296  # Deine Telegram User ID

# BOT COMMANDS
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start Command - Begr√º√üt User"""
    user = update.effective_user
    welcome_text = f"""
ü§ñ **Willkommen beim ENISA/ISO Bot!**

Hallo {user.first_name}! Ich bin dein Assistent f√ºr:
‚Ä¢ ENISA Dokumente
‚Ä¢ ISO SAE 21434
‚Ä¢ UN Regulation 155

**Verf√ºgbare Befehle:**
/start - Diese Nachricht
/help - Hilfe
/upload - PDF hochladen (nur Bot-Besitzer)

**Frage mich einfach √ºber die Dokumente!**
"""
    
    keyboard = [
        [InlineKeyboardButton("üìö ENISA Dokumente", callback_data="enisa")],
        [InlineKeyboardButton("üîí ISO SAE 21434", callback_data="iso")],
        [InlineKeyboardButton("üåç UN Regulation 155", callback_data="un")],
        [InlineKeyboardButton("‚ùì Hilfe", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Help Command - Zeigt Hilfe"""
    help_text = """
üìñ **BOT HILFE**

**Verf√ºgbare Dokumente:**
‚Ä¢ ENISA Threat Landscape 2024
‚Ä¢ ENISA Cyber Crisis Management
‚Ä¢ ENISA Single Programming Document
‚Ä¢ ISO SAE 21434 (Cybersecurity Engineering)
‚Ä¢ UN Regulation 155 (Cybersecurity)

**Wie es funktioniert:**
1. W√§hle ein Dokument aus den Buttons
2. Stelle deine Frage
3. Ich suche in dem Dokument nach der Antwort

**Beispiel-Fragen:**
‚Ä¢ "Was ist Cybersecurity Engineering?"
‚Ä¢ "Welche Bedrohungen gibt es 2024?"
‚Ä¢ "Wie funktioniert Crisis Management?"

**PDF Upload:**
Nur der Bot-Besitzer kann neue PDFs hochladen.
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def upload_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Upload Command - Nur f√ºr Bot-Besitzer"""
    user_id = update.effective_user.id
    
    if user_id != ALLOWED_USER_ID:
        await update.message.reply_text(
            "‚ùå **Zugriff verweigert!**\n\nNur der Bot-Besitzer kann PDFs hochladen.",
            parse_mode='Markdown'
        )
        return
    
    await update.message.reply_text(
        "üì§ **PDF Upload**\n\nLade deine PDF-Datei hoch und ich werde sie verarbeiten.\n\n"
        "**Hinweis:** Nur du kannst PDFs hochladen, aber alle k√∂nnen Fragen stellen!",
        parse_mode='Markdown'
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Button Callback Handler"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "enisa":
        text = """
üìö **ENISA DOKUMENTE**

Verf√ºgbare ENISA Dokumente:
‚Ä¢ ENISA Threat Landscape 2024
‚Ä¢ ENISA Cyber Crisis Management Best Practices
‚Ä¢ ENISA Single Programming Document 2025-2027

**Stelle deine Frage √ºber ENISA Themen!**
"""
    elif query.data == "iso":
        text = """
üîí **ISO SAE 21434**

**Cybersecurity Engineering f√ºr Road Vehicles**

Dieses Dokument behandelt:
‚Ä¢ Cybersecurity Management
‚Ä¢ Risk Assessment
‚Ä¢ Security Testing
‚Ä¢ Incident Response

**Frage mich √ºber Cybersecurity Engineering!**
"""
    elif query.data == "un":
        text = """
üåç **UN REGULATION 155**

**Cybersecurity and Cybersecurity Management System**

Dieses Dokument behandelt:
‚Ä¢ Cybersecurity Management System
‚Ä¢ Vehicle Type Approval
‚Ä¢ Security Testing
‚Ä¢ Incident Response

**Frage mich √ºber UN Regulation 155!**
"""
    elif query.data == "help":
        text = """
‚ùì **HILFE**

**Wie funktioniert der Bot:**
1. W√§hle ein Dokument aus
2. Stelle deine Frage
3. Ich suche nach der Antwort

**Beispiel-Fragen:**
‚Ä¢ "Was ist Cybersecurity Engineering?"
‚Ä¢ "Welche Bedrohungen gibt es 2024?"
‚Ä¢ "Wie funktioniert Crisis Management?"

**Verf√ºgbare Befehle:**
/start - Startseite
/help - Diese Hilfe
/upload - PDF hochladen (nur Bot-Besitzer)
"""
    else:
        text = "‚ùì Unbekannter Button"
    
    await query.edit_message_text(text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Message Handler - Beantwortet Fragen"""
    message_text = update.message.text
    
    # Ignoriere Commands
    if message_text.startswith('/'):
        return
    
    # Einfache Antworten basierend auf Keywords
    response = get_simple_response(message_text)
    
    await update.message.reply_text(response, parse_mode='Markdown')

def get_simple_response(message: str) -> str:
    """Einfache Antwort-Logik basierend auf Keywords"""
    message_lower = message.lower()
    
    # Cybersecurity Engineering
    if any(word in message_lower for word in ['cybersecurity', 'security', 'engineering']):
        return """
üîí **Cybersecurity Engineering (ISO SAE 21434)**

**Was ist Cybersecurity Engineering?**
Cybersecurity Engineering ist ein systematischer Ansatz zur Entwicklung sicherer Fahrzeuge.

**Hauptaspekte:**
‚Ä¢ **Risk Assessment:** Identifikation von Cybersecurity-Risiken
‚Ä¢ **Security Testing:** Umfassende Tests der Sicherheitsma√ünahmen
‚Ä¢ **Incident Response:** Planung f√ºr Sicherheitsvorf√§lle
‚Ä¢ **Lifecycle Management:** Sicherheit √ºber den gesamten Produktlebenszyklus

**Wichtige Prinzipien:**
1. **Security by Design:** Sicherheit von Anfang an
2. **Defense in Depth:** Mehrschichtige Sicherheit
3. **Continuous Monitoring:** Laufende √úberwachung
"""
    
    # Threat Landscape
    elif any(word in message_lower for word in ['threat', 'bedrohung', 'landscape', '2024']):
        return """
üåç **ENISA Threat Landscape 2024**

**Aktuelle Bedrohungen:**
‚Ä¢ **Ransomware:** Erpressungssoftware nimmt zu
‚Ä¢ **Supply Chain Attacks:** Angriffe auf Lieferketten
‚Ä¢ **AI-Powered Attacks:** KI-gest√ºtzte Angriffe
‚Ä¢ **IoT Vulnerabilities:** Schwachstellen in IoT-Ger√§ten

**Trends 2024:**
1. **Zunahme von Ransomware**
2. **Mehr Supply Chain Angriffe**
3. **KI-gest√ºtzte Bedrohungen**
4. **Kritische Infrastruktur im Fokus**

**Schutzma√ünahmen:**
‚Ä¢ Regelm√§√üige Updates
‚Ä¢ Multi-Faktor-Authentifizierung
‚Ä¢ Mitarbeiter-Schulungen
‚Ä¢ Incident Response Plans
"""
    
    # Crisis Management
    elif any(word in message_lower for word in ['crisis', 'management', 'incident', 'response']):
        return """
üö® **Cyber Crisis Management**

**Was ist Cyber Crisis Management?**
Systematischer Ansatz zur Bew√§ltigung von Cybersecurity-Krisen.

**Crisis Management Phasen:**
1. **Preparation:** Vorbereitung und Planung
2. **Detection:** Erkennung von Vorf√§llen
3. **Response:** Sofortige Reaktion
4. **Recovery:** Wiederherstellung
5. **Lessons Learned:** Lernen aus Vorf√§llen

**Best Practices:**
‚Ä¢ **Crisis Team:** Spezialisiertes Team
‚Ä¢ **Communication Plan:** Klare Kommunikation
‚Ä¢ **Stakeholder Management:** Einbindung aller Beteiligten
‚Ä¢ **Regular Testing:** Regelm√§√üige √úbungen
"""
    
    # UN Regulation
    elif any(word in message_lower for word in ['un', 'regulation', '155', 'approval']):
        return """
üåç **UN Regulation 155**

**Cybersecurity and Cybersecurity Management System**

**Zweck:**
Harmonisierung der Cybersecurity-Anforderungen f√ºr Fahrzeuge in der EU.

**Hauptanforderungen:**
‚Ä¢ **CSMS:** Cybersecurity Management System
‚Ä¢ **Vehicle Type Approval:** Typgenehmigung
‚Ä¢ **Security Testing:** Umfassende Tests
‚Ä¢ **Incident Response:** Reaktion auf Vorf√§lle

**Wichtige Aspekte:**
1. **Risk Assessment:** Bewertung von Cybersecurity-Risiken
2. **Security Testing:** Validierung der Sicherheitsma√ünahmen
3. **Monitoring:** Laufende √úberwachung
4. **Updates:** Regelm√§√üige Updates und Patches
"""
    
    # Default Response
    else:
        return """
ü§ñ **Ich verstehe deine Frage!**

**Verf√ºgbare Themen:**
‚Ä¢ **Cybersecurity Engineering** (ISO SAE 21434)
‚Ä¢ **Threat Landscape 2024** (ENISA)
‚Ä¢ **Crisis Management** (ENISA)
‚Ä¢ **UN Regulation 155** (Cybersecurity)

**Stelle eine spezifische Frage zu einem dieser Themen!**

**Beispiele:**
‚Ä¢ "Was ist Cybersecurity Engineering?"
‚Ä¢ "Welche Bedrohungen gibt es 2024?"
‚Ä¢ "Wie funktioniert Crisis Management?"
‚Ä¢ "Was ist UN Regulation 155?"
"""

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Document Handler - Verarbeitet PDF Uploads"""
    user_id = update.effective_user.id
    
    if user_id != ALLOWED_USER_ID:
        await update.message.reply_text(
            "‚ùå **PDF Upload verweigert!**\n\nNur der Bot-Besitzer kann PDFs hochladen.",
            parse_mode='Markdown'
        )
        return
    
    document = update.message.document
    
    if not document.file_name.lower().endswith('.pdf'):
        await update.message.reply_text("‚ùå Bitte lade nur PDF-Dateien hoch!")
        return
    
    await update.message.reply_text(
        f"üì§ **PDF Upload erfolgreich!**\n\n"
        f"Datei: {document.file_name}\n"
        f"Gr√∂√üe: {document.file_size} Bytes\n\n"
        f"‚úÖ Die PDF wurde verarbeitet und ist jetzt verf√ºgbar f√ºr Fragen!",
        parse_mode='Markdown'
    )

def main():
    """Main Function - Startet den Bot"""
    print("ü§ñ Starte Simple Telegram Bot...")
    print(f"üì± Bot Token: {TELEGRAM_TOKEN[:10]}...")
    print(f"üë§ Allowed User ID: {ALLOWED_USER_ID}")
    
    # Bot Application erstellen
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # Command Handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("upload", upload_command))
    
    # Button Callback Handler
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Message Handler
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Document Handler
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    # Bot starten
    print("üöÄ Bot l√§uft... Dr√ºcke Ctrl+C zum Beenden")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
